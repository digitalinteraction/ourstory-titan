#!/bin/bash

# Designed for Debian based OS

# This file is for installing Our Story Titan as part of a packaged build workflow (i.e. building a Raspberry PI image).

# DO NOT run this file at every boot as it will try to install Docker from the internet!

DOCKER_COMPOSE=`cat <<-END
version: "3.6"

volumes:
  mongo-data:
    external: false
  redis-data:
    external: false
  www:
  data:
  assets:

services:
  nginx-local:
    restart: on-failure
    image: bootlegger/nginx-local:armv7
    ports:
      - "80:80"
    volumes:
      - ./uploads:/usr/src/app/upload
      - www:/usr/src/app/www:ro
      - data:/usr/src/app/data:ro
      - assets:/usr/src/app/assets:ro
   

  redis:
    restart: on-failure
    image: redis:alpine
    command: redis-server --appendonly yes
    volumes:
      - redis-data:/data

  mongo:
    restart: on-failure
    image: webhippie/mongodb
    volumes:
      - mongo-data:/data/db

  beanstalk:
    restart: on-failure 
    image: bootlegger/beanstalk:armv7

  worker:
    restart: on-failure
    image: bootlegger/ourstory-worker:armv7
    depends_on:
      - mongo
      - beanstalk
    volumes:
      - ./uploads:/usr/src/app/upload
      - www:/usr/src/app/www:ro
      - data:/usr/src/app/data:ro
      - assets:/usr/src/app/assets:ro

  web:
    restart: on-failure
    image: bootlegger/ourstory-server:armv7
    depends_on: 
      - redis
      - mongo
      - beanstalk
    volumes:
      - ./uploads:/usr/src/app/upload
      - www:/usr/src/app/www
      - data:/usr/src/app/data
      - assets:/usr/src/app/assets
END
`

echo "This script installs Our Story Titan. If you do not wish to continue, press CTL-C now..."

sleep 5

# Install Docker:
echo "Installing Docker"

#if command_exists docker; then
#  echo "Docker already installed"
#else
  #curl -sSL https://get.docker.com | sh
#fi

sudo usermod -aG docker $USER

echo "Installing docker-compose"

sudo apt install python-pip libffi-dev python-backports.ssl-match-hostname

sudo pip install docker-compose

# Download Images:

echo "$DOCKER_COMPOSE" > docker-compose.yml

echo "Pulling Images to Local Cache"
sudo docker-compose pull

echo "Putting docker-compose in Startup"

# Put this in the boot up file:
#docker-compose up -d




echo "Setting up Access Point"

# Setup AP (from https://github.com/tombartindale/WiFi-AP-Raspberry-Pi-3)

SSID="OurStory"
PASSPHRASE="ourstoryrocks"
IP_RANGE="10.10.10"
INC="eth0"
WIFI="wlan0"

echo "Setting up your WiFi-Accesspoint on your pi with:"
echo " SSID: $SSID"
echo " PASSPHRASE: $PASSPHRASE"
echo " IP-Address: $IP_RANGE.1"
echo " IP-Range: $IP_RANGE.0"
echo " Incomming device: $INC"
echo " WiFi device: $WIFI"

#apt-get -y upgrade
sudo apt-get -y install hostapd isc-dhcp-server iptables

# check wlan0 available

if ! ifconfig -a | grep "$WIFI"; then
  echo "$WIFI not found, exiting";
  exit -1
fi
if ! ifconfig -a | grep "$INC"; then
  echo "$INC not found, exiting";
  return -1
fi

# modify dhcp.conf
sudo sed -i.bak 's/option domain-name/\#option domain-name/g' /etc/dhcp/dhcpd.conf
sudo sed -i 's/#authoritative;/authoritative;/g' /etc/dhcp/dhcpd.conf

# add ip addresses
CONF="
subnet $IP_RANGE.0 netmask 255.255.255.0 {
  range $IP_RANGE.10 $IP_RANGE.50;
  option broadcast-address $IP_RANGE.255;
  option routers $IP_RANGE.1;
  default-lease-time 600;
  max-lease-time 7200;
  option domain-name "local";
}
"
sudo echo "$CONF" >> /etc/dhcp/dhcpd.conf

# set where DHCP runs
sudo sed -i.bak "s/\(INTERFACES *= *\).*/\1\"$WIFI\"/" /etc/default/isc-dhcp-server

# set static ip address for $WIFI
INTERF_CONF="
# interfaces(5) file used by ifup(8) and ifdown(8)
# Please note that this file is written to be used with dhcpcd
# For static IP, consult /etc/dhcpcd.conf and 'man dhcpcd.conf'
# Include files from /etc/network/interfaces.d:
source-directory /etc/network/interfaces.d

auto lo
iface lo inet loopback

iface $INC inet manual

allow-hotplug $WIFI
iface $WIFI inet static
  address $IP_RANGE.1
  netmask 255.255.255.0
"
sudo echo "$INTERF_CONF" > /etc/network/interfaces
sudo ifconfig $WLAN $IP_RANGE.1

# setup hostapd.conf
CONF_HOST="interface=$WIFI
ssid=$SSID
hw_mode=g
channel=6
macaddr_acl=0
auth_algs=1
ignore_broadcast_ssid=0
wpa=2
wpa_passphrase=$PASSPHRASE
wpa_key_mgmt=WPA-PSK
wpa_pairwise=TKIP
rsn_pairwise=CCMP"
sudo echo "$CONF_HOST" > /etc/hostapd/hostapd.conf
# replace SSID and Passphrase

# deamon config
sudo sed -i.bak 's/#DAEMON_CONF=""/DAEMON_CONF="\/etc\/hostapd\/hostapd.conf"/g' /etc/default/hostapd

# add ip-forward=1
sudo echo "net.ipv4.ip_forward=1" >> /etc/sysctl.conf
sudo echo 1 > /proc/sys/net/ipv4/ip_forward

# add iptables
sudo iptables -t nat -F
sudo iptables -F
sudo iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE
sudo iptables -A FORWARD -i $INC -o $WIFI -m state --state RELATED,ESTABLISHED -j ACCEPT
sudo iptables -A FORWARD -i $WIFI -o $INC -j ACCEPT

# Added by TB: redirect all traffic to port 80 on the local machine.
sudo iptables -t nat -A PREROUTING -d 0/0 -p tcp –dport 80 -j DNAT –to 10.0.0.1:80

# save iptables
sudo iptables-save > /etc/iptables.ipv4.nat

# load on boot
sudo echo '#!/bin/sh' > /etc/network/if-up.d/iptables
sudo echo "echo 'RUNNING iptables restore now'" >> /etc/network/if-up.d/iptables
sudo echo "iptables-restore < /etc/iptables.ipv4.nat" >> /etc/network/if-up.d/iptables
sudo echo "exit 0;" >> /etc/network/if-up.d/iptables

sudo chmod +x /etc/network/if-up.d/iptables

# test access point
echo "AP Installation done!"
sudo /usr/sbin/hostapd /etc/hostapd/hostapd.conf & 


command_exists() {
	command -v "$@" > /dev/null 2>&1
}
